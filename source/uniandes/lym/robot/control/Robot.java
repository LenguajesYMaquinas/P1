/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;
import java.lang.String;
import java.lang.Integer;
import java.util.ArrayList;
@SuppressWarnings("serial")
public class Robot implements RobotConstants {

        public static HashMap<String, Integer> variables = new HashMap<String, Integer>();
        public static HashMap<String, ArrayList<String>> procedures = new HashMap<String, ArrayList<String>>();
        public static ArrayList<String> procedureArguments = new ArrayList<String>();
        public static String actualProcedureName = "";
        public static boolean inProcedureDefinition = false;

        private RobotWorldDec world;


        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida=new String();

//boolean command(uniandes.lym.robot.view.Console sistema) :
  final public boolean command(Console sistema) throws ParseException {
        int x,y;
        salida=new String();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ROBOTR:
      program();
                try {
                Thread.sleep(900);
            }
            catch(InterruptedException e) {
                System.err.format("IOException: %s%n", e);
            }
                {if (true) return true;}
      break;
    case 0:
      jj_consume_token(0);
                 {if (true) return false;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void program() throws ParseException {
    jj_consume_token(ROBOTR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARS:
      variablesDeclaration();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROCS:
      proceduresDeclaration();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    instructionsBlocK(true);
  }

  final public void variablesDeclaration() throws ParseException {
    jj_consume_token(VARS);
    saveVariable();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      saveVariable();
    }
    jj_consume_token(SEMICOLON);
  }

  final public void proceduresDeclaration() throws ParseException {
    jj_consume_token(PROCS);
    label_2:
    while (true) {
      saveProcedure();
                               Robot.inProcedureDefinition = true;
      jj_consume_token(LSQUAREBRACKET);
      jj_consume_token(BAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        saveVariable();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          saveVariable();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(BAR);
      instruction(true);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        jj_consume_token(SEMICOLON);
        instruction(true);
      }
      jj_consume_token(RSQUAREBRACKET);
      saveAllProcedureArguments();
      restartProcedureAtributes();
                                                                               Robot.inProcedureDefinition = false;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
    }
  }

  final public void instructionsBlocK(boolean conditionalCondition) throws ParseException {
    jj_consume_token(LSQUAREBRACKET);
    instruction(conditionalCondition);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      jj_consume_token(SEMICOLON);
      instruction(conditionalCondition);
    }
    jj_consume_token(RSQUAREBRACKET);
  }

  final public void instruction(boolean conditionalCondition) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RIGHT:
    case PUT:
    case PICK:
    case POP:
    case HOP:
    case ASSIGNTO:
    case GOTO:
    case MOVE:
    case TURN:
    case FACE:
    case MOVETOTHE:
    case MOVEINDIR:
    case JUMPTOTHE:
    case JUMPINDIR:
    case NOP:
      commandInstruction(conditionalCondition);
      break;
    case IF:
    case WHILE:
    case REPEAT:
      structureControl();
      break;
    case STRING:
      procedureCall();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void commandInstruction(boolean conditionalCondition) throws ParseException {
  int x=0;
  int y=0;
  String text = "";
  int direction = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOP:
      jj_consume_token(HOP);
      jj_consume_token(LPARENTHESIS);
      x = charNumToInt();
      jj_consume_token(RPARENTHESIS);
                                                                            if(!inProcedureDefinition && conditionalCondition) { world.moveForward(x,true); }
      break;
    case POP:
      jj_consume_token(POP);
      jj_consume_token(LPARENTHESIS);
      x = charNumToInt();
      jj_consume_token(RPARENTHESIS);
                                                                             if(!inProcedureDefinition && conditionalCondition) { world.popBalloons(x); }
      break;
    case RIGHT:
      jj_consume_token(RIGHT);
      jj_consume_token(LPARENTHESIS);
      jj_consume_token(RPARENTHESIS);
                                                             if(!inProcedureDefinition && conditionalCondition) { world.turnRight();}
      break;
    case MOVE:
      jj_consume_token(MOVE);
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        x = charNumToInt();
        break;
      case STRING:
        x = getVariableValue();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                              if(!inProcedureDefinition && conditionalCondition) {world.moveForward(x,false);}
      break;
    case ASSIGNTO:
      jj_consume_token(ASSIGNTO);
      jj_consume_token(COLON);
      x = charNumToInt();
      jj_consume_token(COMMA);
      saveValueToVariable(x);
      break;
    case GOTO:
      jj_consume_token(GOTO);
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        x = charNumToInt();
        break;
      case STRING:
        x = getVariableValue();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        y = charNumToInt();
        break;
      case STRING:
        y = getVariableValue();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                  if(!inProcedureDefinition && conditionalCondition) {world.setPostion(x,y);}
      break;
    case TURN:
      jj_consume_token(TURN);
      jj_consume_token(COLON);
      turnDirection();
      break;
    case FACE:
      jj_consume_token(FACE);
      jj_consume_token(COLON);
      x = getDirection();
                                                      if(!inProcedureDefinition && conditionalCondition) {faceLexer(x); }
      break;
    case PUT:
      jj_consume_token(PUT);
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        x = charNumToInt();
        break;
      case STRING:
        x = getVariableValue();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        jj_consume_token(BALLOONS);
                                                                                                     if(!inProcedureDefinition && conditionalCondition) {world.putBalloons(x); }
        break;
      case CHIPS:
        jj_consume_token(CHIPS);
                                                                                                                                                                                               if(!inProcedureDefinition&& conditionalCondition) {world.putChips(x); }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PICK:
      jj_consume_token(PICK);
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        x = charNumToInt();
        break;
      case STRING:
        x = getVariableValue();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BALLOONS:
        jj_consume_token(BALLOONS);
                                                                                                      if(!inProcedureDefinition && conditionalCondition) {world.grabBalloons(x); }
        break;
      case CHIPS:
        jj_consume_token(CHIPS);
                                                                                                                                                                                                 if(!inProcedureDefinition && conditionalCondition) {world.pickChips(x); }
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case MOVETOTHE:
      jj_consume_token(MOVETOTHE);
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        x = charNumToInt();
        break;
      case STRING:
        x = getVariableValue();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      text = getNormalDirection();
                                                                                                                        if(!inProcedureDefinition && conditionalCondition) { moveToTheLexer(x, text);}
      break;
    case JUMPTOTHE:
      jj_consume_token(JUMPTOTHE);
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        x = charNumToInt();
        break;
      case STRING:
        x = getVariableValue();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      text = getNormalDirection();
                                                                                                                        if(!inProcedureDefinition && conditionalCondition) { jumpToTheLexer(x, text);}
      break;
    case MOVEINDIR:
      jj_consume_token(MOVEINDIR);
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        x = charNumToInt();
        break;
      case STRING:
        x = getVariableValue();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      direction = getDirection();
                                                                                                                         if(!inProcedureDefinition && conditionalCondition) {faceLexer(direction); world.moveForward(x,false);}
      break;
    case JUMPINDIR:
      jj_consume_token(JUMPINDIR);
      jj_consume_token(COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        x = charNumToInt();
        break;
      case STRING:
        x = getVariableValue();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      direction = getDirection();
                                                                                                                     if(!inProcedureDefinition && conditionalCondition) {faceLexer(direction); world.moveForward(x,true);}
      break;
    case NOP:
      jj_consume_token(NOP);
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void structureControl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      conditionalIf();
      break;
    case WHILE:
      loop();
      break;
    case REPEAT:
      repeat();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void conditionalIf() throws ParseException {
        boolean conditionResult = false;
    jj_consume_token(IF);
    jj_consume_token(COLON);
    conditionResult = condition();
    jj_consume_token(THEN);
    jj_consume_token(COLON);
    instructionsBlocK(conditionResult);
    jj_consume_token(ELSE);
    jj_consume_token(COLON);
    instructionsBlocK(!conditionResult);
  }

  final public void loop() throws ParseException {
  boolean conditionResult = false;
    jj_consume_token(WHILE);
    jj_consume_token(COLON);
    condition();
    jj_consume_token(DO);
    jj_consume_token(COLON);
    instructionsBlocK(conditionResult);
  }

  final public void repeat() throws ParseException {
  boolean conditionResult = false;
    jj_consume_token(REPEAT);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    instructionsBlocK(conditionResult);
  }

  final public boolean condition() throws ParseException {
        boolean conditionResult = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACING:
      conditionResult = facing();
      break;
    case CANPUT:
      conditionResult = canPut();
      break;
    case CANPICK:
      conditionResult = canPick();
      break;
    case CANMOVEINDIR:
      conditionResult = canMoveIn();
      break;
    case CANJUMPINDIR:
      conditionResult = canJumpIn();
      break;
    case CANMOVETOTHE:
      conditionResult = canMoveTo();
      break;
    case CANJUMPTOTHE:
      conditionResult = canJumpTo();
      break;
    case NOT:
      conditionResult = not();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                  /*System.out.println(conditionResult);*/ {if (true) return conditionResult;}
    throw new Error("Missing return statement in function");
  }

  final public boolean facing() throws ParseException {
        String direction = "";
        boolean result = false;
    jj_consume_token(FACING);
    jj_consume_token(COLON);
    direction = getCardinalDirection();
          if(direction.toLowerCase().equals("north")) { result = world.facingNorth(); }
          if(direction.toLowerCase().equals("south")) { result = world.facingSouth(); }
          if(direction.toLowerCase().equals("east")) { result = world.facingEast(); }
          if(direction.toLowerCase().equals("west")) { result = world.facingWest(); }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public boolean canPut() throws ParseException {
  int x = 0;
  boolean result = false;
    jj_consume_token(CANPUT);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      x = charNumToInt();
      break;
    case STRING:
      x = getVariableValue();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHIPS:
      jj_consume_token(CHIPS);
      break;
    case BALLOONS:
      jj_consume_token(BALLOONS);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          if(token.image.toLowerCase().equals("balloons") && x <= world.getMyBalloons()) {
                result = true;
          }
          if(token.image.toLowerCase().equals("chips") && x <= world.getMyChips()) {
                result = true;
          }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public boolean canPick() throws ParseException {
  int x = 0;
  boolean result = false;
    jj_consume_token(CANPICK);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      x = charNumToInt();
      break;
    case STRING:
      x = getVariableValue();
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHIPS:
      jj_consume_token(CHIPS);
      break;
    case BALLOONS:
      jj_consume_token(BALLOONS);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          if(token.image.toLowerCase().equals("balloons") && x <= world.countBalloons()) {
                result = true;
          }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public boolean canMoveIn() throws ParseException {
  int x = 0;
  int direction = 0;
  boolean result = false;
    jj_consume_token(CANMOVEINDIR);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      x = charNumToInt();
      break;
    case STRING:
      x = getVariableValue();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
    direction = getDirection();
                int coordenadaActualX = (int)world.getPosition().getX();
                int coordenadaActualY = (int)world.getPosition().getY();

                result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, direction);

                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public boolean canJumpIn() throws ParseException {
  int x = 0;
  int direction = 0;
  boolean result = false;
    jj_consume_token(CANJUMPINDIR);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      x = charNumToInt();
      break;
    case STRING:
      x = getVariableValue();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
    direction = getDirection();
                int coordenadaActualX = (int)world.getPosition().getX();

                int coordenadaActualY = (int)world.getPosition().getY();

                int nuevaPos = 0;
                Point nuevoPunto = new Point(0, 0);

                if(direction == 0) {
                        nuevaPos = coordenadaActualY + x;
                        nuevoPunto = new Point(coordenadaActualX, nuevaPos);
                }
                else if (direction == 1) {
                        nuevaPos = coordenadaActualY - x;
                        nuevoPunto = new Point(coordenadaActualX, nuevaPos);
                }
                else if (direction == 2) {
                        nuevaPos = coordenadaActualX + x;
                        nuevoPunto = new Point(nuevaPos, coordenadaActualY);
                }
                else if (direction == 3){
                        nuevaPos = coordenadaActualX - x;
                        nuevoPunto = new Point(nuevaPos, coordenadaActualY);
                }

                result = !(world.isBlocked(nuevoPunto));

                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public boolean canMoveTo() throws ParseException {
  String direction = "";
  int x = 0;
  boolean result = false;
    jj_consume_token(CANMOVETOTHE);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      x = charNumToInt();
      break;
    case STRING:
      x = getVariableValue();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
    direction = getNormalDirection();
    int actualFacing = world.getFacing();

        int coordenadaActualX = (int)world.getPosition().getX();

        int coordenadaActualY = (int)world.getPosition().getY();

        if(actualFacing == 0 && direction.toLowerCase().equals("back")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 1);
                }
                else if(actualFacing == 0 && direction.toLowerCase().equals("front")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 0);
                }
                else if(actualFacing == 0 && direction.toLowerCase().equals("right")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 2);
                }
                else if(actualFacing == 0 && direction.toLowerCase().equals("left")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 3);
                }

                else if(actualFacing == 1 && direction.toLowerCase().equals("back")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 0);
                }
                else if(actualFacing == 1 && direction.toLowerCase().equals("front")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 1);
                }
                else if(actualFacing == 1 && direction.toLowerCase().equals("right")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 3);
                }
                else if(actualFacing == 1 && direction.toLowerCase().equals("left")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 2);
                }

                else if(actualFacing == 2 && direction.toLowerCase().equals("right")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 1);
                }
                else if(actualFacing == 2 && direction.toLowerCase().equals("left")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 0);
                }
                else if(actualFacing == 2 && direction.toLowerCase().equals("front")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 2);
                }
                else if(actualFacing == 2 && direction.toLowerCase().equals("back")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 3);
                }

                else if(actualFacing == 3 && direction.toLowerCase().equals("left")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 1);
                }
                else if(actualFacing == 3 && direction.toLowerCase().equals("right")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 0);
                }
                else if(actualFacing == 3 && direction.toLowerCase().equals("back")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 2);
                }
                else if(actualFacing == 3 && direction.toLowerCase().equals("front")) {
                        result = world.blockedInRange(coordenadaActualX, coordenadaActualY, x, 3);
                }

                {if (true) return !result;}
    throw new Error("Missing return statement in function");
  }

  final public boolean canJumpTo() throws ParseException {
  String direction = "";
  int x = 0;
  boolean result = false;
    jj_consume_token(CANJUMPTOTHE);
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      x = charNumToInt();
      break;
    case STRING:
      x = getVariableValue();
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
    direction = getNormalDirection();
                int actualFacing = world.getFacing();

        int coordenadaActualX = (int)world.getPosition().getX();

                int coordenadaActualY = (int)world.getPosition().getY();

                int nuevaPos = 0;

                Point nuevoPunto = new Point(0, 0);


                if(actualFacing == 0 && direction.toLowerCase().equals("back")) {
                nuevaPos = coordenadaActualY - x;
                        nuevoPunto = new Point(coordenadaActualX, nuevaPos);
                }
                else if(actualFacing == 0 && direction.toLowerCase().equals("front")) {
                        nuevaPos = coordenadaActualY + x;
                        nuevoPunto = new Point(coordenadaActualX, nuevaPos);
                }
                else if(actualFacing == 0 && direction.toLowerCase().equals("right")) {
                        nuevaPos = coordenadaActualX + x;
                        nuevoPunto = new Point(nuevaPos, coordenadaActualY);
                }
                else if(actualFacing == 0 && direction.toLowerCase().equals("left")) {
                        nuevaPos = coordenadaActualX - x;
                        nuevoPunto = new Point(nuevaPos, coordenadaActualY);
                }

                else if(actualFacing == 1 && direction.toLowerCase().equals("back")) {
                nuevaPos = coordenadaActualY + x;
                        nuevoPunto = new Point(coordenadaActualX, nuevaPos);
                }
                else if(actualFacing == 1 && direction.toLowerCase().equals("front")) {
                        nuevaPos = coordenadaActualY - x;
                        nuevoPunto = new Point(coordenadaActualX, nuevaPos);
                }
                else if(actualFacing == 1 && direction.toLowerCase().equals("right")) {
                        nuevaPos = coordenadaActualX - x;
                        nuevoPunto = new Point(nuevaPos, coordenadaActualY);
                }
                else if(actualFacing == 1 && direction.toLowerCase().equals("left")) {
                        nuevaPos = coordenadaActualX + x;
                        nuevoPunto = new Point(nuevaPos, coordenadaActualY);
                }

                else if(actualFacing == 2 && direction.toLowerCase().equals("right")) {
                nuevaPos = coordenadaActualY - x;
                        nuevoPunto = new Point(coordenadaActualX, nuevaPos);
                }
                else if(actualFacing == 2 && direction.toLowerCase().equals("left")) {
                        nuevaPos = coordenadaActualY + x;
                        nuevoPunto = new Point(coordenadaActualX, nuevaPos);
                }
                else if(actualFacing == 2 && direction.toLowerCase().equals("front")) {
                        nuevaPos = coordenadaActualX + x;
                        nuevoPunto = new Point(nuevaPos, coordenadaActualY);
                }
                else if(actualFacing == 2 && direction.toLowerCase().equals("back")) {
                        nuevaPos = coordenadaActualX - x;
                        nuevoPunto = new Point(nuevaPos, coordenadaActualY);
                }

                else if(actualFacing == 3 && direction.toLowerCase().equals("left")) {
                nuevaPos = coordenadaActualY - x;
                        nuevoPunto = new Point(coordenadaActualX, nuevaPos);
                }
                else if(actualFacing == 3 && direction.toLowerCase().equals("right")) {
                        nuevaPos = coordenadaActualY + x;
                        nuevoPunto = new Point(coordenadaActualX, nuevaPos);
                }
                else if(actualFacing == 3 && direction.toLowerCase().equals("back")) {
                        nuevaPos = coordenadaActualX + x;
                        nuevoPunto = new Point(nuevaPos, coordenadaActualY);
                }
                else if(actualFacing == 3 && direction.toLowerCase().equals("front")) {
                        nuevaPos = coordenadaActualX - x;
                        nuevoPunto = new Point(nuevaPos, coordenadaActualY);
                }

                result = world.isBlocked(nuevoPunto);

                {if (true) return !result;}
    throw new Error("Missing return statement in function");
  }

  final public boolean not() throws ParseException {
  boolean conditionResult = false;
  boolean result = false;
    jj_consume_token(NOT);
    jj_consume_token(COLON);
    conditionResult = condition();
    if(conditionResult) { result = false; }
    else { result = true; }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void procedureCall() throws ParseException {
        int expectedArguments = 0;
        int argumentCounter = 0;
    isAProcedure();
                         expectedArguments = procedures.get(token.image).size();
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case STRING:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        getVariableValue();
                                                                                                                    argumentCounter = argumentCounter+1;
        break;
      case NUMBER:
        jj_consume_token(NUMBER);
                                                                                                                                                                          argumentCounter = argumentCounter+1;
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          getVariableValue();
                                                                                                                                                                                                                                                   argumentCounter = argumentCounter+1;
          break;
        case NUMBER:
          jj_consume_token(NUMBER);
                                                                                                                                                                                                                                                                                                         argumentCounter = argumentCounter+1;
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
                                                                                                                                                                                                                                                                                                                                                      if(expectedArguments !=  argumentCounter) {{if (true) throw new Error("The expected arguments does not match with the recieved arguments.");}}
  }

  final public int charNumToInt() throws ParseException, Error {
        int total=1;
    jj_consume_token(NUMBER);
                try{
                        total = Integer.parseInt(token.image);
                }
                catch (NumberFormatException ee){
                        {if (true) throw new Error("Number out of bounds: "+token.image+" !!");}
                }
                {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  final public void saveVariable() throws ParseException {
        String variableName = "";
    jj_consume_token(STRING);
                variableName=token.image;
                if(inProcedureDefinition) {
                  Robot.variables.put(variableName, 0);
                Robot.procedureArguments.add(variableName);
                }
                else {
                        Robot.variables.put(variableName, -1);
                }
                /*System.out.println(Robot.variables.keySet());*/

  }

  final public void saveValueToVariable(int value) throws ParseException, Error {
        String variableName = "";
    jj_consume_token(STRING);
                variableName=token.image;
                if(Robot.variables.replace(variableName, value) != null) {
                  Robot.variables.replace(variableName, value);
                }
                else{
                  {if (true) throw new Error("The variable " + variableName +  " has not been declared.");}
                }
                /*System.out.println(Robot.variables.toString());*/

  }

  final public int getVariableValue() throws ParseException, Error {
        int variableValue = 0;
        String variableName = "";
    jj_consume_token(STRING);
                variableName=token.image;
                if(Robot.variables.containsKey(variableName)) {
                        variableValue = Robot.variables.get(variableName);
                }
                else{
                        {if (true) throw new Error("The variable " + variableName +  " has not been declared.");}
                }
                if(variableValue == -1) {
                        {if (true) throw new Error("The variable " + variableName +  " has not been initialized.");}
                }
                {if (true) return variableValue;}
    throw new Error("Missing return statement in function");
  }

  final public void saveProcedure() throws ParseException {
        String procedureName = "";
    jj_consume_token(STRING);
                procedureName = token.image;
                Robot.actualProcedureName = procedureName;
                Robot.procedures.put(procedureName, new ArrayList<String >());
  }

  final public void saveProcedureArgument() throws ParseException {
  String procedureArgumentName = "";
    jj_consume_token(STRING);
                procedureArgumentName = token.image;
                Robot.procedureArguments.add(procedureArgumentName);
  }

  final public void saveAllProcedureArguments() throws ParseException {
    if(Robot.procedures.replace(Robot.actualProcedureName, Robot.procedureArguments) != null) {
        Robot.procedures.replace(Robot.actualProcedureName, Robot.procedureArguments);
        }
  }

  final public void restartProcedureAtributes() throws ParseException {
    Robot.actualProcedureName = "";
    Robot.procedureArguments = new ArrayList<String>();
  }

  final public void isAnArgumentString() throws ParseException {
  String argumentName = "";
    jj_consume_token(STRING);
    argumentName = token.image;
  }

  final public void isAProcedure() throws ParseException {
  String procedureName = "";
    jj_consume_token(STRING);
    procedureName = token.image;

    if(Robot.procedures.get(procedureName) ==  null) {
                {if (true) throw new Error("The procedure " + procedureName +  " has not been declared.");}
    }
    else {
                Robot.actualProcedureName = procedureName;
    }
  }

  final public String getNormalDirection() throws ParseException {
  String direction = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FRONT:
      jj_consume_token(FRONT);
      break;
    case RIGHT:
      jj_consume_token(RIGHT);
      break;
    case LEFT:
      jj_consume_token(LEFT);
      break;
    case BACK:
      jj_consume_token(BACK);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            direction = token.image; {if (true) return direction;}
    throw new Error("Missing return statement in function");
  }

  final public String getCardinalDirection() throws ParseException {
  String direction = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORTH:
      jj_consume_token(NORTH);
      break;
    case SOUTH:
      jj_consume_token(SOUTH);
      break;
    case EAST:
      jj_consume_token(EAST);
      break;
    case WEST:
      jj_consume_token(WEST);
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
             direction=token.image; {if (true) return direction;}
    throw new Error("Missing return statement in function");
  }

  final public void moveToTheLexer(int steps, String direction) throws ParseException {
        int facing = world.getFacing();
                if(direction.toLowerCase().equals("front")) {
                        if(facing == 1) {
                          while(steps > 0) {
                                world.down();
                                steps = steps-1;
                          }
                        }
                        if(facing == 2) {
                          while(steps > 0) {
                                world.right();
                                steps = steps-1;
                          }
                        }
                        if(facing == 0) {
                          while(steps > 0) {
                                world.up();
                                steps = steps-1;
                          }
                        }
                        if(facing == 3) {
                          while(steps > 0) {
                                world.left();
                                steps = steps-1;
                          }
                        }
                }
                if(direction.toLowerCase().equals("left")) {
                        if(facing == 1) {
                          while(steps > 0) {
                                world.right();
                                steps = steps-1;
                          }
                        }
                        if(facing == 2) {
                          while(steps > 0) {
                                world.up();
                                steps = steps-1;
                          }
                        }
                        if(facing == 0) {
                          while(steps > 0) {
                                world.left();
                                steps = steps-1;
                          }
                        }
                        if(facing == 3) {
                          while(steps > 0) {
                                world.down();
                                steps = steps-1;
                          }
                        }
                }
                if(direction.toLowerCase().equals("right")) {
                        if(facing == 1) {
                          while(steps > 0) {
                                world.left();
                                steps = steps-1;
                          }
                        }
                        if(facing == 2) {
                          while(steps > 0) {
                                world.down();
                                steps = steps-1;
                          }
                        }
                        if(facing == 0) {
                          while(steps > 0) {
                                world.right();
                                steps = steps-1;
                          }
                        }
                        if(facing == 3) {
                          while(steps > 0) {
                                world.up();
                                steps = steps-1;
                          }
                        }
                }
                if(direction.toLowerCase().equals("back")) {
                        if(facing == 1) {
                          while(steps > 0) {
                                world.up();
                                steps = steps-1;
                          }
                        }
                        if(facing == 2) {
                          while(steps > 0) {
                                world.left();
                                steps = steps-1;
                          }
                        }
                        if(facing == 0) {
                          while(steps > 0) {
                                world.down();
                                steps = steps-1;
                          }
                        }
                        if(facing == 3) {
                          while(steps > 0) {
                                world.right();
                                steps = steps-1;
                          }
                        }
                }
  }

  final public void jumpToTheLexer(int steps, String direction) throws ParseException {
        int facing = world.getFacing();
                if(direction.toLowerCase().equals("front")) {
                        world.moveForward(steps,true);
                }
                if(direction.toLowerCase().equals("right")) {
                        world.turnRight();
                        world.moveForward(steps,true);
                }
                if(direction.toLowerCase().equals("back")) {
                        world.turnRight();
                        world.turnRight();
                        world.moveForward(steps,true);
                }
                if(direction.toLowerCase().equals("left")) {
                        world.turnRight();
                        world.turnRight();
                        world.turnRight();
                        world.moveForward(steps,true);
                }
  }

  final public void turnDirection() throws ParseException {
  String direction = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AROUND:
      jj_consume_token(AROUND);
      break;
    case RIGHT:
      jj_consume_token(RIGHT);
      break;
    case LEFT:
      jj_consume_token(LEFT);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
           direction = token.image;

                if(!inProcedureDefinition && conditionalCondition) {

                        if(direction.toLowerCase().equals("around")) {
                                for (int i=0;i<4;i++) {
                                        world.turnRight();
                                }
                }
                else if (direction.toLowerCase().equals("right")) {
                                world.turnRight();
                }
                else if (direction.toLowerCase().equals("left")) {
                                for (int i=0;i<3;i++) {
                                        world.turnRight();
                                }
                }
                }
  }

  final public int getDirection() throws ParseException {
  String direction;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORTH:
      jj_consume_token(NORTH);
      break;
    case SOUTH:
      jj_consume_token(SOUTH);
      break;
    case EAST:
      jj_consume_token(EAST);
      break;
    case WEST:
      jj_consume_token(WEST);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    direction = token.image;

    if(direction.toLowerCase().equals("north")) {
                {if (true) return 0;}
    }
    else if (direction.toLowerCase().equals("south")) {
                {if (true) return 1;}
    }
    else if (direction.toLowerCase().equals("east")) {
                {if (true) return 2;}
    }
    else if (direction.toLowerCase().equals("west")) {
                {if (true) return 3;}
    }
    {if (true) return -1;}
    throw new Error("Missing return statement in function");
  }

  final public void faceLexer(int x) throws ParseException {
  int timesOfTurnRight = 0;
    int actualFacing = world.getFacing();

    if(actualFacing == 0 && x == 1) {
                timesOfTurnRight = 2;
        }
        else if(actualFacing == 2 && x == 1) {
                timesOfTurnRight = 1;
        }
        else if(actualFacing == 3 && x == 1) {
                timesOfTurnRight = 3;
        }
        else if(actualFacing == 0 && x == 2) {
                timesOfTurnRight = 1;
        }
        else if(actualFacing == 3 && x == 2) {
                timesOfTurnRight = 2;
        }
        else if(actualFacing == 1 && x == 2) {
                timesOfTurnRight = 3;
        }
        else if(actualFacing == 0 && x == 3) {
                timesOfTurnRight = 3;
        }
        else if(actualFacing == 1 && x == 3) {
                timesOfTurnRight = 1;
        }
        else if(actualFacing == 2 && x == 3) {
                timesOfTurnRight = 2;
        }
        else if(actualFacing == 1 && x == 0) {
                timesOfTurnRight = 2;
        }
        else if(actualFacing == 2 && x == 0) {
                timesOfTurnRight = 3;
        }
        else if(actualFacing == 3 && x == 0) {
                timesOfTurnRight = 1;
        }
        for(int i=0;i<timesOfTurnRight;i++) {
                world.turnRight();
        }
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[41];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x21,0x40,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x80310000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x310000,0x0,0x3fc00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000d00,0xf000,0x80000300,0xf000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x20000,0x20000,0x10000000,0x80000,0x10000000,0x80000,0x10007ff7,0x18000000,0x18000000,0x18000000,0x18000000,0x18000,0x18000000,0x18000,0x18000000,0x18000000,0x18000000,0x18000000,0x7ff7,0x0,0x18000000,0x0,0x18000000,0x18000,0x18000000,0x18000,0x18000000,0x18000000,0x18000000,0x18000000,0x18000000,0x20000,0x18000000,0x18000000,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 41; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
